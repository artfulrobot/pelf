<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from /buildkit/build/dmaster/sites/default/files/civicrm/ext/pelf/xml/schema/CRM/Pelf/PelfFundsAllocation.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:23a2e712365ecea9b96116da26c6b456)
 */

/**
 * Database access object for the PelfFundsAllocation entity.
 */
class CRM_Pelf_DAO_PelfFundsAllocation extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_pelf_funds_allocation';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique PelfFundsAllocation ID
   *
   * @var int
   */
  public $id;

  /**
   * FK to Case
   *
   * @var int
   */
  public $case_id;

  /**
   * Amount in local currency
   *
   * @var float
   */
  public $amount;

  /**
   * OptionValue for project
   *
   * @var int
   */
  public $project;

  /**
   * Date of start of the financial year to which this ammount is allocated.
   *
   * @var date
   */
  public $fy_start;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_pelf_funds_allocation';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'case_id', 'civicrm_case', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_Pelf_ExtensionUtil::ts('Unique PelfFundsAllocation ID'),
          'required' => TRUE,
          'where' => 'civicrm_pelf_funds_allocation.id',
          'table_name' => 'civicrm_pelf_funds_allocation',
          'entity' => 'PelfFundsAllocation',
          'bao' => 'CRM_Pelf_DAO_PelfFundsAllocation',
          'localizable' => 0,
        ],
        'case_id' => [
          'name' => 'case_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_Pelf_ExtensionUtil::ts('FK to Case'),
          'where' => 'civicrm_pelf_funds_allocation.case_id',
          'table_name' => 'civicrm_pelf_funds_allocation',
          'entity' => 'PelfFundsAllocation',
          'bao' => 'CRM_Pelf_DAO_PelfFundsAllocation',
          'localizable' => 0,
          'FKClassName' => 'CRM_Case_DAO_Case',
        ],
        'pelf_allocation_amount' => [
          'name' => 'amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => CRM_Pelf_ExtensionUtil::ts('Amount'),
          'description' => CRM_Pelf_ExtensionUtil::ts('Amount in local currency'),
          'precision' => [
            20,
            2,
          ],
          'where' => 'civicrm_pelf_funds_allocation.amount',
          'table_name' => 'civicrm_pelf_funds_allocation',
          'entity' => 'PelfFundsAllocation',
          'bao' => 'CRM_Pelf_DAO_PelfFundsAllocation',
          'localizable' => 0,
        ],
        'pelf_project' => [
          'name' => 'project',
          'type' => CRM_Utils_Type::T_INT,
          'title' => CRM_Pelf_ExtensionUtil::ts('Project'),
          'description' => CRM_Pelf_ExtensionUtil::ts('OptionValue for project'),
          'where' => 'civicrm_pelf_funds_allocation.project',
          'table_name' => 'civicrm_pelf_funds_allocation',
          'entity' => 'PelfFundsAllocation',
          'bao' => 'CRM_Pelf_DAO_PelfFundsAllocation',
          'localizable' => 0,
        ],
        'pelf_fy_start' => [
          'name' => 'fy_start',
          'type' => CRM_Utils_Type::T_DATE,
          'title' => CRM_Pelf_ExtensionUtil::ts('Fy Start'),
          'description' => CRM_Pelf_ExtensionUtil::ts('Date of start of the financial year to which this ammount is allocated.'),
          'where' => 'civicrm_pelf_funds_allocation.fy_start',
          'table_name' => 'civicrm_pelf_funds_allocation',
          'entity' => 'PelfFundsAllocation',
          'bao' => 'CRM_Pelf_DAO_PelfFundsAllocation',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'pelf_funds_allocation', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'pelf_funds_allocation', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
